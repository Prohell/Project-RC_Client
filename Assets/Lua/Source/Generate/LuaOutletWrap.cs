//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaOutletWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaOutlet), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("BindLua", BindLua);
		L.RegFunction("BindFromLua", BindFromLua);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OutletInfos", get_OutletInfos, set_OutletInfos);
		L.RegVar("m_LuaName", get_m_LuaName, set_m_LuaName);
		L.RegVar("m_LuaTable", get_m_LuaTable, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindLua(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaOutlet obj = (LuaOutlet)ToLua.CheckObject(L, 1, typeof(LuaOutlet));
			string arg0 = ToLua.CheckString(L, 2);
			obj.BindLua(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindFromLua(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaOutlet obj = (LuaOutlet)ToLua.CheckObject(L, 1, typeof(LuaOutlet));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.BindFromLua(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OutletInfos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaOutlet obj = (LuaOutlet)o;
			System.Collections.Generic.List<LuaOutlet.OutletInfo> ret = obj.OutletInfos;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OutletInfos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_LuaName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaOutlet obj = (LuaOutlet)o;
			string ret = obj.m_LuaName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_LuaName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_LuaTable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaOutlet obj = (LuaOutlet)o;
			LuaInterface.LuaTable ret = obj.m_LuaTable;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_LuaTable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OutletInfos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaOutlet obj = (LuaOutlet)o;
			System.Collections.Generic.List<LuaOutlet.OutletInfo> arg0 = (System.Collections.Generic.List<LuaOutlet.OutletInfo>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<LuaOutlet.OutletInfo>));
			obj.OutletInfos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OutletInfos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_LuaName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaOutlet obj = (LuaOutlet)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.m_LuaName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_LuaName on a nil value" : e.Message);
		}
	}
}

