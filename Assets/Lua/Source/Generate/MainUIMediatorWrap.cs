//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MainUIMediatorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MainUIMediator), typeof(System.Object));
		L.RegFunction("OnInit", OnInit);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("New", _CreateMainUIMediator);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_View", get_m_View, set_m_View);
		L.RegVar("m_UIName", get_m_UIName, set_m_UIName);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMainUIMediator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MainUIMediator obj = new MainUIMediator();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MainUIMediator.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MainUIMediator obj = (MainUIMediator)ToLua.CheckObject(L, 1, typeof(MainUIMediator));
			obj.OnInit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MainUIMediator obj = (MainUIMediator)ToLua.CheckObject(L, 1, typeof(MainUIMediator));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_View(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MainUIMediator obj = (MainUIMediator)o;
			LuaInterface.LuaTable ret = obj.m_View;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_View on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_UIName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MainUIMediator obj = (MainUIMediator)o;
			string ret = obj.m_UIName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_UIName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_View(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MainUIMediator obj = (MainUIMediator)o;
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.m_View = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_View on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_UIName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MainUIMediator obj = (MainUIMediator)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.m_UIName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_UIName on a nil value" : e.Message);
		}
	}
}

