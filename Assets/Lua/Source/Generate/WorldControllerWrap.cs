//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WorldControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WorldController), typeof(Singleton<WorldController>));
		L.RegFunction("MarchListClick", MarchListClick);
		L.RegFunction("MoveClick", MoveClick);
		L.RegFunction("DoMove", DoMove);
		L.RegFunction("AttackClick", AttackClick);
		L.RegFunction("GoOutClick", GoOutClick);
		L.RegFunction("SetMarchUI", SetMarchUI);
		L.RegFunction("RefreshUI", RefreshUI);
		L.RegFunction("MapBlockClick", MapBlockClick);
		L.RegFunction("SelectItem", SelectItem);
		L.RegFunction("SetMarch", SetMarch);
		L.RegFunction("SetCity", SetCity);
		L.RegFunction("OnInit", OnInit);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("New", _CreateWorldController);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_MapModel", get_m_MapModel, set_m_MapModel);
		L.RegVar("m_WorldModel", get_m_WorldModel, set_m_WorldModel);
		L.RegVar("m_WorldUIView", get_m_WorldUIView, set_m_WorldUIView);
		L.RegVar("m_WorldView", get_m_WorldView, set_m_WorldView);
		L.RegVar("m_MapAStarCompact", get_m_MapAStarCompact, set_m_MapAStarCompact);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateWorldController(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				WorldController obj = new WorldController();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: WorldController.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarchListClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MarchListClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			obj.MoveClick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			Coord arg0 = (Coord)ToLua.CheckObject(L, 2, typeof(Coord));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			System.Action arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action)ToLua.CheckObject(L, 4, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			obj.DoMove(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttackClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			obj.AttackClick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GoOutClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			obj.GoOutClick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMarchUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			obj.SetMarchUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			obj.RefreshUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MapBlockClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.MapBlockClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectItem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			Coord arg0 = (Coord)ToLua.CheckObject(L, 2, typeof(Coord));
			obj.SelectItem(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMarch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.SetMarch(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.SetCity(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			obj.OnInit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WorldController obj = (WorldController)ToLua.CheckObject(L, 1, typeof(WorldController));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_MapModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			MapProxy ret = obj.m_MapModel;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_MapModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_WorldModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			WorldProxy ret = obj.m_WorldModel;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_WorldModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_WorldUIView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			LuaInterface.LuaTable ret = obj.m_WorldUIView;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_WorldUIView on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_WorldView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			WorldView ret = obj.m_WorldView;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_WorldView on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_MapAStarCompact(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			MapAStarCompact ret = obj.m_MapAStarCompact;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_MapAStarCompact on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_MapModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			MapProxy arg0 = (MapProxy)ToLua.CheckObject(L, 2, typeof(MapProxy));
			obj.m_MapModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_MapModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_WorldModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			WorldProxy arg0 = (WorldProxy)ToLua.CheckObject(L, 2, typeof(WorldProxy));
			obj.m_WorldModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_WorldModel on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_WorldUIView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.m_WorldUIView = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_WorldUIView on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_WorldView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			WorldView arg0 = (WorldView)ToLua.CheckUnityObject(L, 2, typeof(WorldView));
			obj.m_WorldView = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_WorldView on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_MapAStarCompact(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WorldController obj = (WorldController)o;
			MapAStarCompact arg0 = (MapAStarCompact)ToLua.CheckObject(L, 2, typeof(MapAStarCompact));
			obj.m_MapAStarCompact = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_MapAStarCompact on a nil value" : e.Message);
		}
	}
}

