//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MySceneManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MySceneManager), typeof(Singleton<MySceneManager>));
		L.RegFunction("OnInit", OnInit);
		L.RegFunction("SwitchToScene", SwitchToScene);
		L.RegFunction("OnReset", OnReset);
		L.RegFunction("New", _CreateMySceneManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CurrentSceneId", get_CurrentSceneId, null);
		L.RegVar("hdlSceneWillSwitch", get_hdlSceneWillSwitch, set_hdlSceneWillSwitch);
		L.RegFunction("SceneSwitchHandler", MySceneManager_SceneSwitchHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMySceneManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MySceneManager obj = new MySceneManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MySceneManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MySceneManager obj = (MySceneManager)ToLua.CheckObject(L, 1, typeof(MySceneManager));
			obj.OnInit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwitchToScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MySceneManager obj = (MySceneManager)ToLua.CheckObject(L, 1, typeof(MySceneManager));
			SceneId arg0 = (SceneId)ToLua.CheckObject(L, 2, typeof(SceneId));
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.SwitchToScene(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnReset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MySceneManager obj = (MySceneManager)ToLua.CheckObject(L, 1, typeof(MySceneManager));
			obj.OnReset();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentSceneId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MySceneManager obj = (MySceneManager)o;
			SceneId ret = obj.CurrentSceneId;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurrentSceneId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hdlSceneWillSwitch(IntPtr L)
	{
		ToLua.Push(L, new EventObject("MySceneManager.hdlSceneWillSwitch"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hdlSceneWillSwitch(IntPtr L)
	{
		try
		{
			MySceneManager obj = (MySceneManager)ToLua.CheckObject(L, 1, typeof(MySceneManager));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'MySceneManager.hdlSceneWillSwitch' can only appear on the left hand side of += or -= when used outside of the type 'MySceneManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				MySceneManager.SceneSwitchHandler ev = (MySceneManager.SceneSwitchHandler)DelegateFactory.CreateDelegate(typeof(MySceneManager.SceneSwitchHandler), arg0.func);
				obj.hdlSceneWillSwitch += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				MySceneManager.SceneSwitchHandler ev = (MySceneManager.SceneSwitchHandler)LuaMisc.GetEventHandler(obj, typeof(MySceneManager), "hdlSceneWillSwitch");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (MySceneManager.SceneSwitchHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.hdlSceneWillSwitch -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MySceneManager_SceneSwitchHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(MySceneManager.SceneSwitchHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(MySceneManager.SceneSwitchHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

