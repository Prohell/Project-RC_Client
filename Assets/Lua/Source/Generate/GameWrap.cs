//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Game), typeof(System.Object));
		L.RegFunction("OnInit", OnInit);
		L.RegFunction("InitGameBase", InitGameBase);
		L.RegFunction("ConnectToServer", ConnectToServer);
		L.RegFunction("InitGameAssets", InitGameAssets);
		L.RegFunction("OnUpdate", OnUpdate);
		L.RegFunction("OnReset", OnReset);
		L.RegFunction("OnLog", OnLog);
		L.RegFunction("StartCoroutine", StartCoroutine);
		L.RegFunction("New", _CreateGame);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("initState", get_initState, set_initState);
		L.RegVar("ServerIp", get_ServerIp, set_ServerIp);
		L.RegVar("ServerPort", get_ServerPort, set_ServerPort);
		L.RegVar("ServerPortTest", get_ServerPortTest, set_ServerPortTest);
		L.RegVar("tableManager", get_tableManager, null);
		L.RegVar("SceneManager", get_SceneManager, null);
		L.RegVar("LuaManager", get_LuaManager, null);
		L.RegVar("UIManager", get_UIManager, set_UIManager);
		L.RegVar("gameObjectRoot", get_gameObjectRoot, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGame(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Game obj = new Game();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Game.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Game.OnInit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitGameBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Game.InitGameBase();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectToServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action<bool,string> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<bool,string>)ToLua.CheckObject(L, 1, typeof(System.Action<bool,string>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<bool,string>), func) as System.Action<bool,string>;
			}

			Game.ConnectToServer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitGameAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 1, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			Game.InitGameAssets(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Game.OnUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnReset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Game.OnReset();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLog(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.LogType arg2 = (UnityEngine.LogType)ToLua.CheckObject(L, 3, typeof(UnityEngine.LogType));
			Game.OnLog(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartCoroutine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.IEnumerator arg0 = (System.Collections.IEnumerator)ToLua.CheckObject(L, 1, typeof(System.Collections.IEnumerator));
			Game.StartCoroutine(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_initState(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Game.initState);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerIp(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Game.ServerIp);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerPort(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Game.ServerPort);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerPortTest(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Game.ServerPortTest);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tableManager(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Game.tableManager);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SceneManager(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Game.SceneManager);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Game.LuaManager);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIManager(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Game.UIManager);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gameObjectRoot(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Game.gameObjectRoot);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_initState(IntPtr L)
	{
		try
		{
			GameInitState arg0 = (GameInitState)ToLua.CheckObject(L, 2, typeof(GameInitState));
			Game.initState = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerIp(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Game.ServerIp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerPort(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Game.ServerPort = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerPortTest(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Game.ServerPortTest = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIManager(IntPtr L)
	{
		try
		{
			UIManager arg0 = (UIManager)ToLua.CheckObject(L, 2, typeof(UIManager));
			Game.UIManager = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

