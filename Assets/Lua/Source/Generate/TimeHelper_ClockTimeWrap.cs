//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TimeHelper_ClockTimeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TimeHelper.ClockTime), null);
		L.RegFunction("Parse", Parse);
		L.RegFunction("ToSeconds", ToSeconds);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateTimeHelper_ClockTime);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("zero", get_zero, set_zero);
		L.RegVar("hour", get_hour, set_hour);
		L.RegVar("minute", get_minute, set_minute);
		L.RegVar("second", get_second, set_second);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTimeHelper_ClockTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				TimeHelper.ClockTime obj = new TimeHelper.ClockTime(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int), typeof(int)))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				TimeHelper.ClockTime obj = new TimeHelper.ClockTime(arg0, arg1, arg2);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				TimeHelper.ClockTime obj = new TimeHelper.ClockTime();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TimeHelper.ClockTime.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			TimeHelper.ClockTime o = TimeHelper.ClockTime.Parse(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToSeconds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimeHelper.ClockTime obj = (TimeHelper.ClockTime)ToLua.CheckObject(L, 1, typeof(TimeHelper.ClockTime));
			int o = obj.ToSeconds();
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimeHelper.ClockTime obj = (TimeHelper.ClockTime)ToLua.CheckObject(L, 1, typeof(TimeHelper.ClockTime));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zero(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, TimeHelper.ClockTime.zero);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hour(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeHelper.ClockTime obj = (TimeHelper.ClockTime)o;
			int ret = obj.hour;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hour on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_minute(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeHelper.ClockTime obj = (TimeHelper.ClockTime)o;
			int ret = obj.minute;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minute on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_second(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeHelper.ClockTime obj = (TimeHelper.ClockTime)o;
			int ret = obj.second;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index second on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zero(IntPtr L)
	{
		try
		{
			TimeHelper.ClockTime arg0 = (TimeHelper.ClockTime)ToLua.CheckObject(L, 2, typeof(TimeHelper.ClockTime));
			TimeHelper.ClockTime.zero = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hour(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeHelper.ClockTime obj = (TimeHelper.ClockTime)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.hour = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hour on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_minute(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeHelper.ClockTime obj = (TimeHelper.ClockTime)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.minute = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minute on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_second(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeHelper.ClockTime obj = (TimeHelper.ClockTime)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.second = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index second on a nil value" : e.Message);
		}
	}
}

