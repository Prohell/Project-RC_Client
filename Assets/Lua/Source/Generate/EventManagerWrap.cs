//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class EventManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(EventManager), typeof(Singleton<EventManager>));
		L.RegFunction("OnReset", OnReset);
		L.RegFunction("AddEventListener", AddEventListener);
		L.RegFunction("RemoveEventListener", RemoveEventListener);
		L.RegFunction("SendEvent", SendEvent);
		L.RegFunction("New", _CreateEventManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegFunction("EventHandler", EventManager_EventHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateEventManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				EventManager obj = new EventManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: EventManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnReset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			EventManager obj = (EventManager)ToLua.CheckObject(L, 1, typeof(EventManager));
			obj.OnReset();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			EventManager obj = (EventManager)ToLua.CheckObject(L, 1, typeof(EventManager));
			string arg0 = ToLua.CheckString(L, 2);
			EventManager.EventHandler arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (EventManager.EventHandler)ToLua.CheckObject(L, 3, typeof(EventManager.EventHandler));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(EventManager.EventHandler), func) as EventManager.EventHandler;
			}

			obj.AddEventListener(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			EventManager obj = (EventManager)ToLua.CheckObject(L, 1, typeof(EventManager));
			string arg0 = ToLua.CheckString(L, 2);
			EventManager.EventHandler arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (EventManager.EventHandler)ToLua.CheckObject(L, 3, typeof(EventManager.EventHandler));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(EventManager.EventHandler), func) as EventManager.EventHandler;
			}

			obj.RemoveEventListener(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			EventManager obj = (EventManager)ToLua.CheckObject(L, 1, typeof(EventManager));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.SendEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EventManager_EventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(EventManager.EventHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(EventManager.EventHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

