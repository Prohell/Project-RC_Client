//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TimeHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TimeHelper), typeof(Mono_Singleton<TimeHelper>));
		L.RegFunction("SecondToClockTime", SecondToClockTime);
		L.RegFunction("ClockTimeToSecond", ClockTimeToSecond);
		L.RegFunction("AddOneDelegateToTimeCalc", AddOneDelegateToTimeCalc);
		L.RegFunction("AddEveryDelegateToTimeCalc", AddEveryDelegateToTimeCalc);
		L.RegFunction("AddFrameDelegateToTimeCalc", AddFrameDelegateToTimeCalc);
		L.RegFunction("RemoveFromTimeCalcWhenDisable", RemoveFromTimeCalcWhenDisable);
		L.RegFunction("RemoveFromTimeCalc", RemoveFromTimeCalc);
		L.RegFunction("IsTimeCalcKeyExist", IsTimeCalcKeyExist);
		L.RegFunction("IsCalcTimeOver", IsCalcTimeOver);
		L.RegFunction("GetCalcTime", GetCalcTime);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SecondToClockTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			TimeHelper.ClockTime o = TimeHelper.SecondToClockTime(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClockTimeToSecond(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimeHelper.ClockTime arg0 = (TimeHelper.ClockTime)ToLua.CheckObject(L, 1, typeof(TimeHelper.ClockTime));
			int o = TimeHelper.ClockTimeToSecond(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOneDelegateToTimeCalc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(TimeHelper), typeof(string), typeof(float), typeof(DelegateHelper.StringDelegate)))
			{
				TimeHelper obj = (TimeHelper)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				DelegateHelper.StringDelegate arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (DelegateHelper.StringDelegate)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(DelegateHelper.StringDelegate), func) as DelegateHelper.StringDelegate;
				}

				bool o = obj.AddOneDelegateToTimeCalc(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(TimeHelper), typeof(string), typeof(float), typeof(DelegateHelper.VoidDelegate)))
			{
				TimeHelper obj = (TimeHelper)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				DelegateHelper.VoidDelegate arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (DelegateHelper.VoidDelegate)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(DelegateHelper.VoidDelegate), func) as DelegateHelper.VoidDelegate;
				}

				bool o = obj.AddOneDelegateToTimeCalc(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: TimeHelper.AddOneDelegateToTimeCalc");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEveryDelegateToTimeCalc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			TimeHelper obj = (TimeHelper)ToLua.CheckObject(L, 1, typeof(TimeHelper));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			DelegateHelper.IntDelegate arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (DelegateHelper.IntDelegate)ToLua.CheckObject(L, 4, typeof(DelegateHelper.IntDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(DelegateHelper.IntDelegate), func) as DelegateHelper.IntDelegate;
			}

			bool o = obj.AddEveryDelegateToTimeCalc(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFrameDelegateToTimeCalc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			TimeHelper obj = (TimeHelper)ToLua.CheckObject(L, 1, typeof(TimeHelper));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			DelegateHelper.FloatDelegate arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (DelegateHelper.FloatDelegate)ToLua.CheckObject(L, 4, typeof(DelegateHelper.FloatDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(DelegateHelper.FloatDelegate), func) as DelegateHelper.FloatDelegate;
			}

			bool o = obj.AddFrameDelegateToTimeCalc(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveFromTimeCalcWhenDisable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = TimeHelper.RemoveFromTimeCalcWhenDisable(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveFromTimeCalc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeHelper obj = (TimeHelper)ToLua.CheckObject(L, 1, typeof(TimeHelper));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.RemoveFromTimeCalc(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsTimeCalcKeyExist(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeHelper obj = (TimeHelper)ToLua.CheckObject(L, 1, typeof(TimeHelper));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsTimeCalcKeyExist(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsCalcTimeOver(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeHelper obj = (TimeHelper)ToLua.CheckObject(L, 1, typeof(TimeHelper));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsCalcTimeOver(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCalcTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeHelper obj = (TimeHelper)ToLua.CheckObject(L, 1, typeof(TimeHelper));
			string arg0 = ToLua.CheckString(L, 2);
			float o = obj.GetCalcTime(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

