//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BagModelWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BagModel), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("StartUpdateData", StartUpdateData);
		L.RegFunction("New", _CreateBagModel);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_BagController", get_m_BagController, set_m_BagController);
		L.RegVar("OnUpdateData", get_OnUpdateData, set_OnUpdateData);
		L.RegVar("TestString", get_TestString, set_TestString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBagModel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				BagModel obj = new BagModel();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: BagModel.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BagModel obj = (BagModel)ToLua.CheckObject(L, 1, typeof(BagModel));
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.Init(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartUpdateData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BagModel obj = (BagModel)ToLua.CheckObject(L, 1, typeof(BagModel));
			obj.StartUpdateData();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_BagController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BagModel obj = (BagModel)o;
			LuaInterface.LuaTable ret = obj.m_BagController;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_BagController on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnUpdateData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BagModel obj = (BagModel)o;
			DelegateUtil.VoidDelegate ret = obj.OnUpdateData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnUpdateData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TestString(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BagModel obj = (BagModel)o;
			string ret = obj.TestString;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TestString on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_BagController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BagModel obj = (BagModel)o;
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.m_BagController = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_BagController on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnUpdateData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BagModel obj = (BagModel)o;
			DelegateUtil.VoidDelegate arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (DelegateUtil.VoidDelegate)ToLua.CheckObject(L, 2, typeof(DelegateUtil.VoidDelegate));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(DelegateUtil.VoidDelegate), func) as DelegateUtil.VoidDelegate;
			}

			obj.OnUpdateData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnUpdateData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TestString(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BagModel obj = (BagModel)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.TestString = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TestString on a nil value" : e.Message);
		}
	}
}

